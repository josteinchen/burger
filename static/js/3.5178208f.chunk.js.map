{"version":3,"sources":["components/UI/Input/Input.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.js","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js"],"names":["module","exports","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","street","zipCode","minLength","maxLength","country","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","Button","btnType","disabled","loading","Spinner","className","classes","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","CheckoutSummary","style","width","margin","Burger","clicked","checkoutCancelled","checkoutContinued","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHanelder","replace","summary","to","purchasedRedirect","purchased","path","match","component","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.5178208f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2us7e\",\"Label\":\"Input_Label__1GWJp\",\"InputElement\":\"Input_InputElement__3AqbC\",\"Invalid\":\"Input_Invalid__2SBJU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2AEeq\",\"Input\":\"ContactData_Input__1bKl_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2wbW4\"};","/* eslint-disable no-labels */\r\nimport React, { Component } from \"react\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from \"./ContactData.module.css\";\r\n\r\nimport axios from \"../../../axios-orders\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport { connect } from \"react-redux\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-mail\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Zip Code\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayValue: \"Fastest\" },\r\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n          ],\r\n        },\r\n        value: \"fastest\",\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {};\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      formData[formElementIdentifier] = this.state.orderForm[\r\n        formElementIdentifier\r\n      ].value;\r\n    }\r\n\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId,\r\n    };\r\n\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(\r\n      this.state.orderForm[inputIdentifier],\r\n      {\r\n        value: event.target.value,\r\n        touched: true,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.orderForm[inputIdentifier].validation\r\n        ),\r\n      }\r\n    );\r\n\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    updatedFormElement.value = event.target.value;\r\n    updatedFormElement.touched = true;\r\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n\r\n    let formIsValid = true;\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (let key in this.state.orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray.map((formElement) => (\r\n          <Input\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            key={formElement.id}\r\n            invalid={!formElement.config.valid}\r\n            touched={formElement.config.touched}\r\n            shouldValidate={formElement.config.validation}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n          />\r\n        ))}\r\n\r\n        <Button btnType='Success' disabled={!this.state.formIsValid}>\r\n          ORDER\r\n        </Button>\r\n      </form>\r\n    );\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter your Contact Data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React from \"react\";\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./CheckoutSummary.module.css\";\r\n\r\nconst CheckoutSummary = props => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes well</h1>\r\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n\r\n      <Button btnType='Danger' clicked={props.checkoutCancelled}>\r\n        CANCLE\r\n      </Button>\r\n\r\n      <Button btnType='Success' clicked={props.checkoutContinued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutSummary;\r\n","import React, { Component } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\n\r\nclass Checkout extends Component {\r\n  // state = {\r\n  //   ingredients: null,\r\n  //   price: 0\r\n  // };\r\n\r\n  // componentWillMount() {\r\n  //   const query = new URLSearchParams(this.props.location.search);\r\n  //   const ingredients = {};\r\n  //   let price = 0;\r\n  //   // eslint-disable-next-line no-unused-vars\r\n  //   for (let param of query.entries()) {\r\n  //     if (param[0] === \"price\") {\r\n  //       price = param[1];\r\n  //     } else {\r\n  //       ingredients[param[0]] = +param[1];\r\n  //     }\r\n  //   }\r\n  //   this.setState({ ingredients: ingredients, price: price });\r\n  // }\r\n\r\n  // componentWillMount() {\r\n  //   this.props.onInitPurchase();\r\n  // }\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  checkoutContinuedHanelder = () => {\r\n    this.props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n  render() {\r\n    let summary = <Redirect to='/' />;\r\n\r\n    if (this.props.ings) {\r\n      const purchasedRedirect = this.props.purchased ? (\r\n        <Redirect to='/' />\r\n      ) : null;\r\n      summary = (\r\n        <div>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ings}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n            checkoutContinued={this.checkoutContinuedHanelder}\r\n          />\r\n\r\n          <Route\r\n            path={this.props.match.path + \"/contact-data\"}\r\n            component={ContactData}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return summary;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onInitPurchase: () => dispatch(actions.purchaseInit)\r\n//   };\r\n// };\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n  // mapDispatchToProps\r\n)(Checkout);\r\n","import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst Input = props => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n          onChange={props.changed}>\r\n          {props.elementConfig.options.map(option => (\r\n            <option value={option.value} key={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"],"sourceRoot":""}